import React from 'react'
import useDate from '../hook/Date';
import Blog from './Blog';
import './Style.css'

const Blogging = () => {
    const { time, date } = useDate();
  const blogs = [
    {
      id: 1,
      Title: '10 Secrets Every Web Developer Should Know Before Starting Their Freelancing Journey',
      param: 'Here is a deep dive into a wealth of knowledge given in Ten things every web developer should know before going full-time freelancing It heavily focuses on aspects such as setting clear and realistic goals, developing a hard-hitting portfolio that will turn heads — all the way to working smartly, getting to your clients who are sure to give you work, being an ace at networking. Polygon photoshop model: Full Bare FrameCurbing halfway in, syllabus layout within, not flat;Although tree-edge sofabytes go byBooting from a whole sector fills up the primary frame.The efficiency that follows hype fits well with tire athleticsshutdown depends on growing new rootsIt kills resplendence ---Natasha Simone Withers May 20 · 1 min read By adhering to these tips, developers shall become competent enough to build a reputation, generate their first set of projects and sustain in the freelancing arena for good.',
      date: `${date}`,
    },
    {
      id: 2,
      Title: 'Understanding JavaScript ES6 Features',
      param: 'JavaScript ES6 brought a variety of new features that significantly improved the language, making it more efficient, readable, and developer-friendly. Before ES6, JavaScript was functional but lacked many features that developers in other programming languages had grown accustomed to. ES6 aimed to bridge that gap and modernize JavaScript, allowing for cleaner syntax and reducing common boilerplate code. One of the most notable changes in ES6 was the introduction of arrow functions. These functions provide a shorter syntax for writing functions, making the code more concise. Instead of the traditional function keyword, arrow functions use the arrow syntax. One key benefit is how they handle the value of this. In traditional functions, this can be dynamically scoped, meaning it changes based on how the function is called. Arrow functions, on the other hand, lexically bind this, meaning they capture the value from their enclosing context. This eliminates the need for developers to use workarounds like the self or that pattern. Another major feature in ES6 was template literals. Before their introduction, string concatenation in JavaScript required cumbersome syntax using the plus operator. Template literals allow developers to embed variables and expressions directly into strings, using backticks and the dollar sign with curly braces. This made working with dynamic strings far more intuitive and less error-prone, particularly when building larger templates or combining multiple variables into one string. Destructuring is another feature that made ES6 stand out. It allows developers to unpack values from arrays or properties from objects into distinct variables in a single line. This is incredibly useful when dealing with complex data structures, enabling cleaner and more readable code. Instead of manually extracting values and assigning them to variables, destructuring provides a more elegant solution. Whether you are working with function arguments or handling API responses, destructuring can simplify the code by reducing redundancy and making it easier to follow. ES6 also introduced the let and const keywords, which provided a better way to declare variables compared to var. Let allows you to declare variables with block-level scope, which means the variable is only accessible within the block it was declared in, reducing the chances of accidental global variable declarations. Const, on the other hand, is used to declare variables that won’t be reassigned. This is particularly useful when working with constants or ensuring that certain values remain unchanged throughout the code. Both let and const have become preferred over var due to their more predictable scoping behavior. The spread and rest operators in ES6 also revolutionized how developers work with arrays and objects. The spread operator allows you to expand an array or object into its individual elements, making it easier to merge, copy, or pass data to functions. The rest operator, meanwhile, gathers the remaining arguments into an array, which is useful when working with functions that accept a variable number of arguments. Another important addition in ES6 is classes, which provided a more familiar syntax for object-oriented programming. While JavaScript has always supported prototypes and inheritance, the class syntax introduced in ES6 made it easier for developers coming from other object-oriented languages like Java or Python. It allowed for clearer and more organized code, especially when dealing with inheritance and methods. Modules were also a big win for developers in ES6, enabling better code organization and reusability. With modules, developers can now export and import functions, objects, or variables from different files, making it easier to split code into manageable pieces. This has greatly improved how JavaScript is written in large projects, promoting modularity and maintainability. Promises in ES6 addressed the growing need for handling asynchronous code in a more readable and manageable way. Before promises, callbacks were the primary method for handling asynchronous operations, but they often led to callback hell, where nested callbacks became difficult to follow and debug. Promises allow developers to chain asynchronous operations and handle success or failure in a cleaner, more structured way. Lastly, ES6 also introduced default parameters for functions, allowing developers to set default values for function arguments if they are not provided. This reduces the need for manual checks or setting defaults inside the function body. Overall, ES6 was a pivotal update that modernized JavaScript, introducing features that have since become essential for developers. It made code more readable, modular, and easier to maintain while simplifying many common tasks. These improvements have played a major role in making JavaScript one of the most popular programming languages in the world.', 
      date: `${date}`,
    },
    {
      id: 3,
      Title: 'What exactly does a freelancer do?',
      param: 'Freelancers are individuals who work for themselves, offering their services to clients on a per-project basis. Unlike traditional full-time employees, freelancers are not tied to a single employer but instead have the freedom to work with multiple clients simultaneously. Freelancing is common in fields such as writing, graphic design, programming, consulting, marketing, and more One of the main appeals of freelancing is the flexibility it offers. Freelancers can choose when and where they work, allowing them to design a work-life balance that suits their personal needs. However, with this freedom comes the responsibility of managing all aspects of their business, from finding clients and setting rates to handling taxes and ensuring job security. For many freelancers, the key to success lies in building a strong network of clients and consistently delivering high-quality work. Establishing a good reputation through professionalism, meeting deadlines, and maintaining good communication is essential. This allows freelancers to secure repeat business, gain referrals, and stand out in a competitive market.Freelancers may also choose to collaborate with agencies or platforms that connect them with potential clients, streamlining the process of finding work. However, this often comes at the cost of a commission fee. Some freelancers prefer this route because it provides a level of stability and reduces the time spent on client acquisition. While freelancing offers autonomy, it also has challenges, such as fluctuating income and the lack of traditional employee benefits like health insurance, retirement plans, or paid time off. To overcome these obstacles, freelancers must be proactive in managing their finances and planning for periods of low work demand. In conclusion, freelancing is a dynamic career path that offers flexibility and independence but requires careful planning and management to succeed. Whether working alone or partnering with agencies, freelancers must balance the freedom they enjoy with the responsibilities of running their own business.',
      date: `${date}`,
    },
    {
      id: 3,
      Title: 'Managing WhatsApp Storage: A New Feature to Simplify Your Chats',
      param: 'WhatsApp, the globally popular messaging app owned by Meta, has introduced a new feature designed to help users manage their storage more efficiently. Many people face issues with their WhatsApp storage filling up quickly due to media-heavy conversations. This new tool addresses this problem by identifying which chats are consuming the most memory, making it easier to free up space. Aside from this feature, WhatsApp has a lesser-known trick that allows you to discover which contacts you interact with the most. Here`s how you can check which conversations are using the most storage on your device Open WhatsApp on your phone. Tap the three-dot menu icon in the upper right corner. Navigate to Settings and select Storage and Data. Click on Manage Storage to see a breakdown of how much space each conversation is taking up. In addition to these updates, Meta has also revealed plans to support third-party video and voice calls by 2027, aiming to enhance the user experience even further. Despite these new features, the company assures that privacy and security will remain a core focus. Users will be prompted to update their app settings when this new feature becomes available. Another feature in testing allows users to interact with status updates more easily. Soon, you`ll be able to open status updates directly from the viewer list. A green ring will appear around a contact`s profile photo in the list of status viewers, signaling that they`ve posted a status as well.',
      date: `${date}`,
    },
  ];
  return (
    <>
       <div className="card_inner_blog">
          {blogs.map((blog) => (
              <Blog
            key={blog.id} 
            Title={blog.Title} 
            param={blog.param} 
            date={blog.date} 
            />
          ))}
        </div>
    </>
  )
}

export default Blogging
